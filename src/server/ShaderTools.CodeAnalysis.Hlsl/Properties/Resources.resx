<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousBinaryOperator" xml:space="preserve">
    <value>Binary operator '{0}' invocation on types '{1}' and '{2}' is ambiguous.</value>
  </data>
  <data name="AmbiguousField" xml:space="preserve">
    <value>Field '{0}' is ambiguous.</value>
  </data>
  <data name="AmbiguousInvocation" xml:space="preserve">
    <value>Invocation is ambiguous between '{0}' and '{1}'.</value>
  </data>
  <data name="AmbiguousNamespaceOrType" xml:space="preserve">
    <value>'{0}' is ambiguous between '{1}' and '{2}'.</value>
  </data>
  <data name="AmbiguousReference" xml:space="preserve">
    <value>Name '{0}' is ambiguous between '{1}' and '{2}'.</value>
  </data>
  <data name="AmbiguousType" xml:space="preserve">
    <value>Type '{0}' is ambiguous between '{1}' and '{2}'.</value>
  </data>
  <data name="AmbiguousUnaryOperator" xml:space="preserve">
    <value>Unary operator '{0}' invocation on type '{1}' is ambiguous.</value>
  </data>
  <data name="BadDirectivePlacement" xml:space="preserve">
    <value>Preprocessor directives must appear as the first non-whitespace character on a line.</value>
  </data>
  <data name="BadEmbeddedStatement" xml:space="preserve">
    <value>Embedded statement cannot be a declaration.</value>
  </data>
  <data name="CannotApplyBinaryOperator" xml:space="preserve">
    <value>Cannot apply binary operator '{0}' on types '{1}' and '{2}'.</value>
  </data>
  <data name="CannotApplyUnaryOperator" xml:space="preserve">
    <value>Cannot apply unary operator '{0}' on type '{1}'.</value>
  </data>
  <data name="CannotConvert" xml:space="preserve">
    <value>Cannot convert type '{0}' to '{1}'.</value>
  </data>
  <data name="ConstantExpected" xml:space="preserve">
    <value>A constant value is expected.</value>
  </data>
  <data name="DirectiveExpected" xml:space="preserve">
    <value>Preprocessor directive expected.</value>
  </data>
  <data name="EndIfDirectiveExpected" xml:space="preserve">
    <value>Expected #endif directive.</value>
  </data>
  <data name="EndOfPreprocessorLineExpected" xml:space="preserve">
    <value>Comment or end-of-line expected.</value>
  </data>
  <data name="ExpressionExpected" xml:space="preserve">
    <value>Expected expression.</value>
  </data>
  <data name="FunctionMissingImplementation" xml:space="preserve">
    <value>Function '{0}' missing implementation.</value>
  </data>
  <data name="FunctionOverloadResolutionFailure" xml:space="preserve">
    <value>No overload for '{0}' takes {1} arguments.</value>
  </data>
  <data name="IllegalInputCharacter" xml:space="preserve">
    <value>Invalid character in input '{0}'.</value>
  </data>
  <data name="ImplicitTruncation" xml:space="preserve">
    <value>Implicit truncation from '{0}' to '{1}'.</value>
  </data>
  <data name="IncludeNotFound" xml:space="preserve">
    <value>Cannot open source file '{0}'.</value>
  </data>
  <data name="IncludeUnexpectedError" xml:space="preserve">
    <value>Unexpected error opening source file '{0}': {1}.</value>
  </data>
  <data name="InvalidExprTerm" xml:space="preserve">
    <value>Invalid expression term '{0}'.</value>
  </data>
  <data name="InvalidHex" xml:space="preserve">
    <value>'{0}' is not a valid hex number.</value>
  </data>
  <data name="InvalidIdentifier" xml:space="preserve">
    <value>The text '{0}' is not a valid identifier</value>
  </data>
  <data name="InvalidInteger" xml:space="preserve">
    <value>'{0}' is not a valid integer.</value>
  </data>
  <data name="InvalidOctal" xml:space="preserve">
    <value>'{0}' is not a valid octal number.</value>
  </data>
  <data name="InvalidReal" xml:space="preserve">
    <value>'{0}' is not a valid decimal number.</value>
  </data>
  <data name="InvocationRequiresParenthesis" xml:space="preserve">
    <value>Invocation of '{0}' requires parenthesis.</value>
  </data>
  <data name="LoopControlVariableConflict" xml:space="preserve">
    <value>Loop control variable '{0}' conflicts with a previous declaration in the outer scope. The most recent declaration will be used.</value>
  </data>
  <data name="MethodOverloadResolutionFailure" xml:space="preserve">
    <value>No overload for method '{0}' takes {1} arguments.</value>
  </data>
  <data name="MissingPreprocessorFile" xml:space="preserve">
    <value>Quoted file name, single-line comment or end-of-line expected.</value>
  </data>
  <data name="NotEnoughMacroParameters" xml:space="preserve">
    <value>Not enough actual parameters for macro '{0}'.</value>
  </data>
  <data name="NoVoidHere" xml:space="preserve">
    <value>Keyword 'void' cannot be used in this context.</value>
  </data>
  <data name="NoVoidParameter" xml:space="preserve">
    <value>Invalid parameter type 'void'.</value>
  </data>
  <data name="NumberTooLarge" xml:space="preserve">
    <value>The number '{0}' is too large.</value>
  </data>
  <data name="SymbolRedefined" xml:space="preserve">
    <value>Redefinition of '{0}'.</value>
  </data>
  <data name="TokenExpected" xml:space="preserve">
    <value>Found '{0}' but expected '{1}'.</value>
  </data>
  <data name="TokenExpectedMultipleChoices" xml:space="preserve">
    <value>Found '{0}' but expected one of the following: {1}.</value>
  </data>
  <data name="TokenUnexpected" xml:space="preserve">
    <value>Unexpected token '{0}'.</value>
  </data>
  <data name="TypeExpected" xml:space="preserve">
    <value>Type expected.</value>
  </data>
  <data name="UndeclaredField" xml:space="preserve">
    <value>Type '{0}' does not have a field '{1}'.</value>
  </data>
  <data name="UndeclaredFunction" xml:space="preserve">
    <value>Function '{0}({1})' is not declared.</value>
  </data>
  <data name="UndeclaredFunctionInNamespaceOrClass" xml:space="preserve">
    <value>Namespace or class {0} does not contain a function or method '{1}'.</value>
  </data>
  <data name="UndeclaredIndexer" xml:space="preserve">
    <value>Type '{0}' does not have an indexer '[{1}]'.</value>
  </data>
  <data name="UndeclaredMethod" xml:space="preserve">
    <value>Type '{0}' does not have a method '{1}({2})'.</value>
  </data>
  <data name="UndeclaredNamespaceOrType" xml:space="preserve">
    <value>A namespace or class '{0}' is not declared.</value>
  </data>
  <data name="UndeclaredType" xml:space="preserve">
    <value>Cannot resolve type: '{0}'.</value>
  </data>
  <data name="UndeclaredVariable" xml:space="preserve">
    <value>Variable '{0}' is not declared.</value>
  </data>
  <data name="UnexpectedAttribute" xml:space="preserve">
    <value>Attribute not expected in this context.</value>
  </data>
  <data name="UnexpectedDirective" xml:space="preserve">
    <value>Unexpected directive: '{0}'.</value>
  </data>
  <data name="UnterminatedComment" xml:space="preserve">
    <value>Comment is not properly terminated.</value>
  </data>
  <data name="UnterminatedString" xml:space="preserve">
    <value>String is not properly terminated.</value>
  </data>
  <data name="InvalidCharacterLiteral" xml:space="preserve">
    <value>Invalid character literal.</value>
  </data>
</root>